// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id       String     @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    imageURL  String?
    firstName String?
    lastName String?
    emailAddress String @unique
    credits Int @default(250)   
    userToProjects UserToProject[]
    questionsAsked Question[]
}

model Project{
    id       String     @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    name      String
    githubUrl String

    deletedAt DateTime?

    userToProjects UserToProject[]
    commits  Commit[]
    sourceCodeEmbeddings SourceCodeEmbedding[]
    savedQuestions Question[]
    meetings Meeting[]
}

model UserToProject{
    id       String     @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    userId   String    
    projectId   String

    user User @relation(fields: [userId],references: [id])
    project Project @relation(fields: [projectId],references: [id])


    @@unique([userId,projectId])

}

model Commit{
    id String  @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    projectId String
    project   Project @relation(fields: [projectId],references: [id])

    // TODO: Better to categorize under `commitDetails` json and define schema for TS
    commitMessage String
    commitHash String
    commitAuthorName String
    commitAuthorAvatar String
    commitDate DateTime
    // summary generated by AI
    summary String
}


model SourceCodeEmbedding{
    id               String  @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")? //?Why 768 ? it is particular to gemini's embedding model
    sourceCode       String  // From langchain
    fileName         String  // From langchain
    summary          String  // From LLM

    projectId        String
    project Project @relation(fields:[projectId],references:[id])
}


model Question{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    question String
    answer String

    fileReferences Json?

    projectId String
    project Project @relation(fields:[projectId],references:[id])

    userId String
    user User @relation(fields:[userId],references:[id])
}

enum EMeetingStatus{
    PROCESSING
    COMPLETED
}

model Meeting{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    meetingUrl String // AppWrite storage url
    projectId String
    project Project @relation(fields:[projectId],references:[id])

    status EMeetingStatus @default(PROCESSING)

    meetingTranscripts MeetingTranscript[]
}

model MeetingTranscript{ // Issues
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    start String
    end String

    transcript String // Gist of the meeting
    headline String
    summary String

    meetingId String
    meeting Meeting @relation(fields:[meetingId],references:[id])
    
}